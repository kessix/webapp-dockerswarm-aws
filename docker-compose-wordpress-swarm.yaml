version: "3.7"

x-deploy: &template-deploy
  replicas: 1
  restart_policy:
    condition: on-failure
  update_config:
    parallelism: 1
    delay: 10s

services:
  traefik:
    image: traefik:v2.2.1
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.godric.local`)"
        - "traefik.http.services.justAdummyService.loadbalancer.server.port=1337"
        - "traefik.http.routers.traefik.service=api@internal"
    ports:
      - "80:80"
      - "843:443"
    networks:
      - "webapp-network"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--api=true"
      - "--log.level=DEBUG"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=true"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
        
  wordpress:
    image: wordpress
    environment:
      WORDPRESS_DB_HOST: wordpressdb.example.us-east-1.rds.amazonaws.com
      WORDPRESS_DB_USER: admin
      WORDPRESS_DB_PASSWORD: ***********************
      WORDPRESS_DB_NAME: wordpress
    networks:
      - "webapp-network"
    volumes:
      - /mnt/app-data-vol:/var/www/html
    deploy: 
      <<: *template-deploy
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.wordpress.entrypoints=web"
        - "traefik.http.routers.wordpress.rule=Host(`wordpress.godric.local`)"
        - "traefik.http.services.wordpress.loadbalancer.server.port=80"

networks: 
  webapp-network:
    external: true